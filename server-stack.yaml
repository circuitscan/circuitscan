AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template to create a Lambda function from an ECR image with a function URL

Parameters:
  ECRRepoName:
    Type: String
    Description: The name of the ECR repository
    Default: circuitscan_server
  ECRImageTag:
    Type: String
    Description: The tag of the ECR image
    Default: latest
  AssocBucket:
    Type: String
    Description: S3 Bucket in which to store package/address associations
    Default: circuitscan-artifacts
  MaxNewest:
    Type: String
    Description: Maximum number of verifiers to keep in latest.json
    Default: 100
  BlobUrl:
    Type: String
    Description: Where compilation artifacts are stored
    Default: https://circuitscan-artifacts.s3.us-west-2.amazonaws.com/

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "LambdaExecutionPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "s3:*"
                Resource:
                  - !Sub arn:aws:s3:::${AssocBucket}/*
                  - !Sub arn:aws:s3:::${AssocBucket}

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${ECRRepoName}-lambda-function"
      Role: !GetAtt LambdaExecutionRole.Arn
      PackageType: Image
      Code:
        ImageUri: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepoName}:${ECRImageTag}"
      MemorySize: 256
      Timeout: 30
      ReservedConcurrentExecutions: 1 # For association, newest feed appends
      Environment:
        Variables:
          ASSOC_BUCKET: !Ref AssocBucket
          MAX_NEWEST: !Ref MaxNewest
          BLOB_URL: !Ref BlobUrl

  LambdaFunctionUrl:
    Type: AWS::Lambda::Url
    Properties:
      AuthType: NONE
      TargetFunctionArn: !GetAtt LambdaFunction.Arn
      Cors:
        AllowOrigins:
          - "*"
        AllowMethods:
          - "*"
        AllowHeaders:
          - "*"

  LambdaFunctionUrlPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunctionUrl"
      FunctionName: !Ref LambdaFunction
      Principal: "*"
      FunctionUrlAuthType: NONE

  NewestAggregateLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${ECRRepoName}-newest-aggregate-lambda-function"
      Role: !GetAtt LambdaExecutionRole.Arn
      MemorySize: 192
      Timeout: 30
      Handler: 'index.handler'
      Runtime: 'nodejs20.x'
      Environment:
        Variables:
          ASSOC_BUCKET: !Ref AssocBucket
          MAX_NEWEST: !Ref MaxNewest
          BLOB_URL: !Ref BlobUrl
      Code:
        ZipFile: |
          const {
            S3Client,
            PutObjectCommand,
            ListObjectsV2Command,
            DeleteObjectsCommand,
          } = require('@aws-sdk/client-s3');

          const s3Client = new S3Client({ region: process.env.AWS_REGION });
          exports.handler = async (event) => {
            const result = await fetch(process.env.BLOB_URL + 'latest.json');
            const data = await result.json();

            const queue = await s3Client.send(new ListObjectsV2Command({
              Bucket: process.env.ASSOC_BUCKET,
              Prefix: 'latest-queue/',
            }));
            if(!queue.KeyCount) return {
              statusCode: 200,
              body: JSON.stringify({
                status: 'no-change',
              }),
            };

            const newItems = await Promise.all(queue.Contents.map(item =>
              fetch(process.env.BLOB_URL + item.Key).then(result => result.json())));

            const newList = [...newItems, ...data.list]
              .sort((a, b) => a.createdAt - b.createdAt)
              .slice(-parseInt(process.env.MAX_NEWEST, 10));

            await s3Client.send(new PutObjectCommand({
              Bucket: process.env.ASSOC_BUCKET,
              Key:`latest.json`,
              ContentType: 'application/json',
              Body: JSON.stringify({
                list: newList,
              }),
            }));

            await s3Client.send(new DeleteObjectsCommand({
              Bucket: process.env.ASSOC_BUCKET,
              Delete: {
                Objects: queue.Contents.map(item => ({ Key: item.Key })),
              },
            }));

            return {
              statusCode: 200,
              body: JSON.stringify({
                status: 'ok',
              }),
            };
          };

  NewestAggregateLambdaFunctionSchedule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: 'rate(1 minute)'
      State: ENABLED
      Targets:
        - Arn: !GetAtt NewestAggregateLambdaFunction.Arn
          Id: "NewestAggregateLambdaFunctionTarget"
      Name: NewestAggregateLambdaFunctionSchedule

  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref NewestAggregateLambdaFunction
      Action: 'lambda:InvokeFunction'
      Principal: 'events.amazonaws.com'
      SourceArn: !GetAtt NewestAggregateLambdaFunctionSchedule.Arn

Outputs:
  LambdaFunctionUrl:
    Description: The URL of the Lambda function
    Value: !GetAtt LambdaFunctionUrl.FunctionUrl

